스트링
포맷코드 정렬
%10s-> 전체 10개짜리 문자열, 대입되는 값을 우측 정렬시킨다.
%-10s-> 좌측정렬
%0.4f 도 같은 의미
{0}{1}.format(대입자료,대입자료) 로도 대체가능
이때 정렬은 {0:<10}(왼쪽정렬), {0:>10}(우측 정렬), {0:^10}(중앙 정렬) 가능
공백채우기는 {0:=^10}
f{}도 가능
f'나는 내년이면 {age + 1}살이 된다.'
a.count('b')->갯수반환
a.find('b')->인덱스 반환 (맨처음 나오는 값, 없으면 -1 반환)
a.index('b')->인덱스 반환, 없으면 오류 발생
"b".join('abcd')각 문자열 사이에 b삽입
a.upper(),a.lower()->대문자,소문자 변환
a.lstrip()/rstrip()/.strip->오른쪽, 왼쪽 의 한칸 이상의 연속 공백 지움
a.replace("a","b")
a.split(" ")나눠서 리스트로 만들어줌
리스트
a[-1]->마지막에서 첫번째 요소
del 객체 (삭제 함수)
a.append()
a.sort()
a.reverse()
a.index(찾으려는 값)
a.insert(삽입 위치, 삽입 값)
a.remove(값)-> 처음으로 나오는 값 삭제
a.pop(값) (삭제하면서 없앰)
a.count(값) !!
a.extend(연장하고자 하는 리스트) 결국 합쳐진 하나의 리스트가 됨
튜플
t=(1,) or 1,2,3으로 표시 가능
딕셔너리
key 와 value -> key는 immutable value 만 ok
a.keys (create key list object dict_keys)
a.values()
a.items()
a.clear()
a.get('key')(없으면 None)==a['key']((없으면 오류)
a.get('key', 'default')없으면 디폴트 값 반환
'key' in a
집합
set()
s1&s2  s1.intersection(s2) 교집합
s1|s2   s1.union(s2) 합집합
s1-s2   s1.difference(s2) 차집합
s1.add('value'), s1.update('value'), s1.remove('value')
불자료형
True  or  False
뭐든지 0,empty 하면 False
변수
id(a) a의 메모리 주소 반환
변수 복사하는 법
b=a[:](리스트 전체)
or from copy import copy
copy(a)
변수 선언 방법들..
a, b = ('python', 'life')  (a, b) = 'python', 'life'  [a, b] = ['python', 'life']  a, b = b, a
IF
 if 조건문 : 수행문장 
조건문 중 x in 튜플, 리스트, 문자열
수행문장 : pass
조건부 표현식 a=조건문이 참인 경우의 값 if 조건문 else 조건문이 거짓인 경우의 값
While
continue -> 다시 조건 검사시로 돌아가게 함.
For
for a in (iterable object) ->  iterable 를 첫 요소부터 마지막 요소까지 차례로 변수
continue 사용 가능 
range(a)--> range(0,a) 의 range 객체 만들어줌 (0이상 a미만)
LIST COMPREHENSION --> [표현식 for 항목 in 반복_가능_객체 if 조건문]
[x*y for x in range(2,10)
...               for y in range(1,10)] 이것도 가능
함수
매개변수 개수를 모를때...
def add_many(*args):  -> * 입력값을 모두 모아 튜플로 만들어줌
def print_kwargs(**kwargs): ->키워드 매개변수, a=1을 입력하면 a:1 의 형태로 딕셔너리로 입력됨
return 은 항상 하나이기 때문에 return a,b 를 하면 (a,b) 로 반환됨
return 은 함수를 즉시 빠져나간다. 
def func(a=b) -> 매개변수 초깃값 설정 ((name, age, man=True)항상 뒤에 넣어줘야함)
전역변수 global
lambda 예약어 -->함수_이름 = lambda 매개변수1, 매개변수2, ... : 매개변수를_이용한_표현식

