스트링
포맷코드 정렬
%10s-> 전체 10개짜리 문자열, 대입되는 값을 우측 정렬시킨다.
%-10s-> 좌측정렬
%0.4f 도 같은 의미
{0}{1}.format(대입자료,대입자료) 로도 대체가능
이때 정렬은 {0:<10}(왼쪽정렬), {0:>10}(우측 정렬), {0:^10}(중앙 정렬) 가능
공백채우기는 {0:=^10}
f{}도 가능
f'나는 내년이면 {age + 1}살이 된다.'
a.count('b')->갯수반환
a.find('b')->인덱스 반환 (맨처음 나오는 값, 없으면 -1 반환)
a.index('b')->인덱스 반환, 없으면 오류 발생
"b".join('abcd')각 문자열 사이에 b삽입
a.upper(),a.lower()->대문자,소문자 변환
a.lstrip()/rstrip()/.strip->오른쪽, 왼쪽 의 한칸 이상의 연속 공백 지움
a.replace("a","b")
a.split(" ")나눠서 리스트로 만들어줌
리스트
a[-1]->마지막에서 첫번째 요소
del 객체 (삭제 함수)
a.append()
a.sort()
a.reverse()
a.index(찾으려는 값)
a.insert(삽입 위치, 삽입 값)
a.remove(값)-> 처음으로 나오는 값 삭제
a.pop(값) (삭제하면서 없앰)
a.count(값) !!
a.extend(연장하고자 하는 리스트) 결국 합쳐진 하나의 리스트가 됨
튜플
t=(1,) or 1,2,3으로 표시 가능
딕셔너리
key 와 value -> key는 immutable value 만 ok
a.keys (create key list object dict_keys)
a.values()
a.items()
a.clear()
a.get('key')(없으면 None)==a['key']((없으면 오류)
a.get('key', 'default')없으면 디폴트 값 반환
'key' in a
집합
set()
s1&s2  s1.intersection(s2) 교집합
s1|s2   s1.union(s2) 합집합
s1-s2   s1.difference(s2) 차집합
s1.add('value'), s1.update('value'), s1.remove('value')
불자료형
True  or  False
뭐든지 0,empty 하면 False
변수
id(a) a의 메모리 주소 반환
변수 복사하는 법
b=a[:](리스트 전체)
or from copy import copy
copy(a)
변수 선언 방법들..
a, b = ('python', 'life')  (a, b) = 'python', 'life'  [a, b] = ['python', 'life']  a, b = b, a
IF
 if 조건문 : 수행문장 
조건문 중 x in 튜플, 리스트, 문자열
수행문장 : pass
조건부 표현식 a=조건문이 참인 경우의 값 if 조건문 else 조건문이 거짓인 경우의 값
While
continue -> 다시 조건 검사시로 돌아가게 함.
For
for a in (iterable object) ->  iterable 를 첫 요소부터 마지막 요소까지 차례로 변수
continue 사용 가능 
range(a)--> range(0,a) 의 range 객체 만들어줌 (0이상 a미만)
LIST COMPREHENSION --> [표현식 for 항목 in 반복_가능_객체 if 조건문]
[x*y for x in range(2,10)
...               for y in range(1,10)] 이것도 가능
함수
매개변수 개수를 모를때...
def add_many(*args):  -> * 입력값을 모두 모아 튜플로 만들어줌
def print_kwargs(**kwargs): ->키워드 매개변수, a=1을 입력하면 a:1 의 형태로 딕셔너리로 입력됨
return 은 항상 하나이기 때문에 return a,b 를 하면 (a,b) 로 반환됨
return 은 함수를 즉시 빠져나간다. 
def func(a=b) -> 매개변수 초깃값 설정 ((name, age, man=True)항상 뒤에 넣어줘야함)
전역변수 global
lambda 예약어 -->함수_이름 = lambda 매개변수1, 매개변수2, ... : 매개변수를_이용한_표현식
입출력
 print("life" "is" "too short") ==> +한것과 같음 ,는 띄어쓰기하고 붙이기
open('주소/파일이름','r 또는 w 또는 a')--> file 객체
open().write('contents')
open().close()
open().readlines() -> 파일의 모든 줄을 읽어서 각각의 줄을 요소로 가지는 리스트를 리턴 (readline()-> 첫번째 줄만 읽는다)
with open("foo.txt", "w") as f:
    f.write("Life is too short, you need python") -> close가 with를 벗어나는 순간 자동으로 나가짐
명령 프롬프트에서 aaa.py arg1 이런식으로 실행하게 하는 법: 
import sys
args = sys.argv[1:]  <--(주소) aaa.py argv[1] argv[2] ....

클래스
a.setdata(p,q)에서 a는 self 매개변수로 간다.
FourCal.setdata(a, 4, 2)  --> a.setdata(4, 2) a가 이미 드러나 첫번째 매개변수에 전달할 필요가 없음
__init__  -> 생성자 (자동으로 호출되는 메소드, 인자를 저장하거나 등 )
class NEW(OLD) :  --> 클래스의 상속 (메소드를 추가하거나, 기존 메소드의 이름으로 새로 def 하면 메소드 오버라이딩이 가능)
모듈
if __name__=='__main__' --> 파이썬 파일이 메인으로 수행될때에만 해당 구문 아래의 함수들 실행(모듈 호출시 자동 실행 방지)
파일 경로 지정해주기 -> sys.path(는 파이썬 라이브러리가 저장된 디렉터리를 보여주는 리스트임) 여기에 모듈 디렉터리를 추가하면 됨
sys.path.append(모듈경로)

C:\doit>set PYTHONPATH=C:\doit\mymod(주소) 입력하는 방법도 됨
패키지
패키지는 여러 디렉토리로 이루어진 모듈 집합--> __init__ 폴더는 해당디렉터리가 패키지의 일부임을 명시, 없으면 패키지로 인식 안됨
__init__ 에 공통 변수나 그런 값들을 넣을 수 있음 또는 자동으로 하부 모듈들을 임포트할 수 있음
__all__ 디렉토리에는 import * 를 했을 때 import 되는 대상을 지정해줘야 함
오류처리
try:
    4 / 0
except ZeroDivisionError as e:
    print(e)  --> 오류 내용과 변수를 설정하고 그때에만 except 문이 실행되게 할 수 있음
finally--> 예외 발생 여부에 상관없이 항상 수행됨
class Bird:
    def fly(self):
        raise NotImplementedError --> 일부러 오류를 발생시키는 경우 (상속 후 fly 메소드 오버라이팅 없이 호출하면 오류 발생)
예외 만들기 --> class Myerror(Exception):  --> Exception 예외 클래스를 상속, 
class MyError(Exception):
    def __str__(self):
        return "허용되지 않는 별명입니다." --> 오류 메세지가 출력되게 함
프로그램 짜기
-> 재귀호출
기타

유니코드
open('euc_kr.txt', encoding='euc-kr') (open 에는 인코딩 지정 기능 있음 -> utf-8 or euc-kr)
편집기로 편집시 소스코드 인코딩 지정하는 법 # -*- coding: utf-8 -*-(기본값, 최상단에 배치) or # -*- coding: utf-8 -*-
클로저
함수를 찍어내는 함수 
class Mul:
    def __init__(self, m):
        self.m = m

    def __call__(self, n):
        return self.m * n  -->  Mul 클래스로 만든 객체에 인수를 전달하여 바로 호출할 수 있도록 하는 메서드
이를 클래스가 아닌 함수를 반환하는 함수로 만들면
class Mul:
    def __init__(self, m):
        self.m = m

    def mul(self, n):
        return self.m * n

if __name__ == "__main__":
    mul3 = Mul(3)
    mul5 = Mul(5)

    print(mul3(10))  # 30 출력
    print(mul5(10))  # 50 출력 --> 이렇게 함수를 만들어 내는 def를 closure 이라고 함.
클로저 중에서 
def elapsed(함수):
	def wrapper():
		....함수()
		return result -->result 는 입력받은 기존 함수 (결국 기존 함수는 그대로 수행하게 함)
	return wrapper --> 처럼 함수를 인자로 받아 함수를 반환하는 클로저는 데코레이터라고 한다. (elapsed(func))의 방식으로 함수에 기능을 추가해주기 때문
-->
@elapsed
def myfunc: -->이런식으로 myfunc를 수행하면 myfunc는 elapsed(myfunc)을 통해 수행됨
이터레이터
-> next() 함수 호출시 계속 다음 값을 리턴하는 객체
반복가능하면 iter()로 이터레이터 객체로 만들 수 있음
이터레이터는 클래스에 __iter__와 __next__라는 2개의 메서드를 구현하여 만들 수 있다
# iterator.py
class MyItertor:
    def __init__(self, data):
        self.data = data
        self.position = 0

    def __iter__(self): -->해당 메소드가 있는 클래스로 생성한 객체는 iterable 해짐
        return self

    def __next__(self): -->반복 가능한 객체의 값을 차례대로 반환하는 역할(for 문 또는 next 함수 호출시 수행됨)
        if self.position >= len(self.data):
            raise StopIteration
        result = self.data[self.position]
        self.position += 1
        return result

if __name__ == "__main__":
    i = MyItertor([1,2,3])
    for item in i:
        print(item)
제너레이터->이터레이터를 생성해주는 역할
def mygen():
	yield 'a'
	yield 'b' -->차례대로 결과를 반환해주는 yield
g=mygen() -->제너라이터 타입의 객체로 됨
gen = (i * i for i in range(1, 1000)) <--제너레이터 표현식
개발시 편의사항: 타입 어노테이션
num: int = 1

