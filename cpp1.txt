1byte=8bit
int ->4byte
/*  */ 주석
문자열-> 마지막 널문자 /0까지 고려
10강
전치와 후치
b=a++ -> b=a; a=a+1
b=++a -> a=a+1;b=a
11강
int 논리값-> 1 참 0 거짓
bool 로도 할 수 있긴 함 같은 1바이트
&&and || or ! not
12강
세미콜론 하나만 있으면 if 문의 중괄호 생략 가능
14강 
switch goto
int choice
makechoice:
switch (choice){
case 1:
	pass
	break;(중괄호 밖으로 나가게 됨)
default:
	goto makechoice;
}
15강 while
do {
	pass
} while(condition)
16강 for
for (i=1처음수행;i<=10그다음조건확인;i++마지막에 실행 다시 조건으로 돌아감 )
중괄호 안에서 선언된 지역변수(똑같이 스택프레임 존재)
17강
for ( 두개 이상의 변수 초기화도 가능 or 생략하고;생략하면true;i++ 두 개 이상의 조건도 가능 ,로 연결) 도 가능( 밖에서 입력 받음)
for 중괄호 내용 없으면 {}생략하고 ; 만 써도 가능
18강 중첩 for 문
20강 배열
int a[5]={1,2,3,4,5};
in a[]={1,2,3,4,5};
sizeof[a] (lens함수와 비슷한데 몇 바이트인지 출력한다는 점에서 다름 a는 8*5 40바이트로 됨 --> sizeof(a)/sizeof(int))
22-25강 포인터
int num;
int *pointer=&num;
int **ppointer=&pointer;
scanf("%d",pointer);
printf("%d",*pointer);
printf("%d",*ppointer);
pointer+1 --> int는 4바이트이기 때문에 +4된 숫자가 반환됨--> 자료형 바이트만큼 더해줌
a==&a[0]
26강
배열포인터
int *ptr=a;
ptr[i]==a[i];
i[ptr]
a[i]==*(a+i)==*(ptr+1)==*(i+ptr)==i[ptr] (교환법칙이 성립하는 방식으로 작동한다.. 쓸일은 없을 것)
arraypointer-->  int arr[3]={1,2,3};
int(*ptr_arr)[3]; //길이 3인 int 형 배열을 가리키는 포인터를 선언
ptr_arr=$arr;
27강 2차원 배열,배열포인터
int arr[2][3]={{1,2,3},{4,5,6}}
int(*ptr)[3]=arr;
--> ptr[i]==arr[i];ptr[i][j]==arr[i][j],ptr==arr
28강 포인터(의) 배열
int *ptr[4]={&a,&b,&c,&d};
printf('%s',str);--> %s는 널문자가 나올때까지 계속 출력해준다
31강 함수
반환할 자료형-->void buyitem(int cost, int cnt){
}
32강
int a=printf("aaa\n"); printf("%d",a);--> 갯수인 4가 출력됨
main함수는 자동으로 0을 return 한다.
33강 callbyvalue , callbyreference
함수에 매개인자를 전달할때 그 값''이 전달되는 것!callbyvalue--> 포인터를 통해서 바꾼다 --> callbyreference(주솟값 자체는 같으므로)
c++에서는 굳이 *를 써서 포인터 변수를 명시하지 않고 reference 변수 &를 써서 int &x 으로 int *x 와 *x를 나타낸다.
34강. 프로토타입
->함수가 어떻게 생겼는지 간단하게 표현하는 것 , 함수가 서로 호출할때 그 순서는 어떻게 해야할 것인가
void walk(int angle); 이런식으로 내용 생략하고 간단하게 선언만 하기(나중에 정의하면 됨)
35강.재귀함수 초깃값 if문으로 설정하기
36강.배열 매개변수로 넘기기
printarr(int arr[4])==printarr(int *arr)
(int ptr[4] == int[4]인 배열의 포인터 임을 유의)
arr[i]==*(arr+i)
arr==&arr[0]
2차원 배열은 배열포인터로 넘길 수 있다. 
&arr[0]==*arr[3]
38강 typedef
typedef int int32 --> int 라는 것을 int32로 사용할 수 있다...
typedef int Pair[2]; Pair point={3,4};--> int point[2]={3,4}
char *name="doodle"==char name[]="doodle" (char 형 포인터에 문자열을 담을 수 있다,char형 배열과 같으므로)
39강 구조체
typedef struct {int x,y;} Pair;==struct Point{intx,y;};
Pair p;
p.x=3;p.y=4;
40강. 구조체와 메모리
나란하게 메모리상에 저장됨
41강. 구조체 가리키기
productinfo *ptr_product=&myProduct;
(*a).b==a->b
42강. cpp 구조체에 함수 집어넣기
struct Time{
int h,m,s;
int totalSec(){ return 3600*h + 60*m +s;}
};
t.totalSec(); 으로 호출
44강. constant, macro, enum
float b=pi*=2; --> pi에 2를 곱해서 pi에 대입(변형시키고) b에 대입
--> const float pi=3.14;(수정할 수 없는 값)
#define PI 3.141592 이것도 됨( 대신 변수로 저장하는 것이 아니라 바꿔서 컴파일 하는 방식) --> macro
enum EGamestate{
	Gamestate,
	Gamestart,
	...
} --> 자동으로 int Gamestate=0; ...식으로 상수를 순차적으로 지정해줌
45강. 매크로 자세히 알아보기
#define SQUARE(X) X*X --> 매개변수를 받아 제곱해줌
-> 함수가 아니라 그저 치환한 것임을 유의 (전체에 괄호 쳐주거나 매크로 쓸때부터 전체 식이랑 변수 각각에 괄호 쳐주는게 안전)
-->square(a-1) == (a-1*a-1) 이 됨
3항연산자 --> return (a>b)?a:b; ( a>b 이면 a 반환, 아니면 b반환)
48강. 유용한 함수들
ch=getchar();
putchar
get_s
puts
#include<stdlib.h>
rand()
#include<time.h>
time(NULL);
exit(0); --> 프로그램을 바로 종료시킴


50강. C++
int a(10); == int a=10;
입출력
#include <iostream>
namespace --> 이름의 성에 대한 느낌
int main(){
	std::cout << "Hello, World!" <<std::endl;
}
-->
using namespace std;
int main(){
	int a,b;
	cin >> a >> b;
	cout << "hello,World!"<< endl;
}
범위기반 for 문
int arr[3]={ 3,1,4};
for ( int n:arr){
	cout<<n<<endl;
}
reference 변수
int &r1=a; (r1이 a를 가리킨다) --> 우항이 r-value(불변값) (수정가능-> l-value)
int &&r1=a*a(r-value 이기 떄문에 &&인 변수로 저장 가능)
51강. overload
더블포인터
void swappointer( int*(&a), int*(&b), int sc=0(이렇게 초기값 설정도 가능, 이러면 필수적인 매개변수가 아님, 입력 안되면 자동으로 초기값 입력됨)){
int *tmp=a;
a=b;
b=tmp;
}--> 매개변수를 넘길때 왼쪽에서부터 차례대로 함
같은 기능 여러 함수 같은 이름으로 해도 매개변수 개수,자료형 등을 자동으로 인식해서 컴파일러가 맞는 함수 찾아주는 기능
53강. 네임스페이스
::n=10; 전역변수로 인 변수 명시 (main 밖에 int n;)
namespace doodle{
	void set(){}
}--> 네임스페이스는 후에 다시 추가할 수 있음
함수도 선언할 수 있음
void doodle::set{
}
--> 복수로 겹쳐있는 네임스페이스 내의 함수를 최하단에 이런식으로 빼면 변수 선언에 구애받지 않고 적절히 조작할 수 있음-->식별자 검색
함수나 변수를 선언할때 using namespace를 해도 이름이 겹치면 네임스페이스::변수또는함수 해줘야함( 오해 여지 없는 서술)
54강. 클래스==구조체?
절차지향 구조체에서 객체 지향 클래스(OOP) 로 가는 것( 객체 지향의 씨블블 구조체, 그 이후 몇개 추가한게 클래스)
private.protected,public
struct TV{
	private:
	bool powerOn;
	public:
	void on(){
	}
}-> private 섹터는 외부에서 접근 불가(구조체 내에서 접근) public은 가능
---> 캡슐화  접근제어지시자 안쓰면 기본으로 퍼블릭 (클래스는 기본적으로 프라이빗임)
55강 this 포인터
자신을 가리키는 포인터
this 로 표현--> cout<< this <<endl
객체의 메소드는 따로 메모리에 저장되어있다.
this 포인터는 보이지 않는 매개변수 *ptr로 받아놓고 이를 &a 로 대입해버림
56강. 객체의 생성과 소멸. 생성자와 소멸자
생성/소멸자: 객체 생성/소멸 될때 자동으로 호출되는 함수
class Myclass{
public:
	Myclass(){ --> 생성자 --> main함수 시작 전에 선언하면서 실행됨
	}
	~Myclass(){ --> 소멸자 --> main 함수 종료후 소멸되면서 실행됨 
	}
}
생성자가 없으면 디폴트 생성자 소멸자가 실행됨( 아무 내용도 없음)
57강. 생성자의 다양한 사용 방법
생성자로 멤버변수 초기화
Complex(): real(0), imag(0) {}
공통된 매개변수 오버로딩 --> 생성자 위임
Time(int h_, int m_, int s_ : Time(m_,s_){
} --> 매개변수 2개면 : 뒤의 두개짜리 오버로드를 호출함
58강. 정적멤버
정적멤버==클래스, 동적멤버==객체 의 개념
class Color{
static Color Mixcolors(Color a, Color b){}
}; --> 전역함수가 클래스랑 밀접한 관련이 있어서 클래스 안에 집어넣고 싶을때 정적으로 씀
Color purple = Color::Mixcolors(blue,red); 이런식으로 클래스와 정적 멤버 메소드를 연결해서 쓸 수 있음

마찬가지로 전역 변수를 클래스 안으로 넣고 싶을때 쓸수 있는게 정적 변수 
60강. 상수형 매개변수와 상수형 메서드
메서드의 상수화
int ViewMoney() const{
	return Money;} --> 메소드의 상수화 ( 다른 변수에 접근할 수 없도록 함)
매개변수의 상수화
void Deposit(const int d){} 
61강. 멤버 메소드 활용하기(벡터와 멤버 메소드)
메소드 간 상호 호출할때... 선언과 정의를 분리하는 것이 좋다
class Vector2{
vector2();}
Vector2::vector2():x(0),y(0){} (const있으면 선언시에 같이 써주기)
동적인 메소드 선언
vector2 add(vector2 rhs){
return vector2(x+rhs.x,y+rhs.y)}
62강. 연산자 오버로딩
메소드 이름을 operator+
-->+만으로 해당 메소드를 오버로딩할 수 있음 --> a*b == a.operator*(b);
객체에서만 오페레이터라는 메소드를 쓸 수 있음
65강. 동적할당
프로그램 실행 중에 변수를 메모리에 할당하는 것
int *a= new int(5); -->new는 연산자, 5가 저장된 곳의 주소를 반환함.. a는 포인터
delete a; --> a가 차지한 메모리 공간을 삭제함 (메모리 사용하고 다시 반환할 수 있음)
배열의 경우에는 배열의 첫 인덱스만 사라짐 --> 배열은 int *arr = new int[len];delete[] arr;
66강. 깊은 복사와 얕은 복사
int *a = new int(5);
int *b = new int(3);
얕은복사-> a = b; //얕은 복사(참조만 복사) callbyvalue --> 복사된 값에 의존적임. 기존 값이 변경되면 같이 변경됨
깊은복사-> *a=*b; // 깊은 복사 (값을 복사) callbyreference --> 완전히 새로운 값이 생성됨. 별개의 값
설명: *a=100(번지수), *b=200; 100번지에는 int 5, 200번지에는 int 3이 존재한다.
이때 a=b;하면 참조(번지수만 보갓되어 둘다 200을 갖게 됨.
-> 이때 5가 지칭받는 포인터가 사라져 다룰 수 없게 되고, delete a;를 했을 때 3이 해제되어 delete b;를 하면 포인터를 따라가도 데이터가 없어 런타임 오류가 됨
*a=*b;를 해서 그 데이터 자체를 복사하면 깊은 복사가 됨
String(const char *str상수형 캐릭터를 가리키는 포인터 라는 뜻){
	len=strlen(str);
	strData= new char[len+1];
	strcpy(strData,str); --> 깊은 복사
}
cout<<(void*)strData<<endl; --> strData가 null 이어도 오류를 방지해줌(char 포인터여서 char배열, 즉 스트링으로 읽어들여 null 값이면 주소가 아닌 스트링값을 읽어들이려고 해 오류)
String s2(s1); 일때 s2, s1모두 string 객체일때 string 객체에 string 매개변수 설정이 없으면 오류가 남--> String(String &rhs){strData=rhs.strData; len=rhs.len;}; 이렇게 reference 로 가능 -->복사 생성자를 만들어주는 것
68강. 대입연산자 오버로딩
마찬가지로 대입연산을 멤버 메소드로 구현해줌
int c=b=a;--> b=a(결과값이 a의 값을 리턴함);c=b;으로 진행
String &operator=(const String &rhs){ }; (&rhs가 아니라 rhs 면 String 객체를 매개변수에 할당하는 과정에서 복사가 한번 더 일어나는데 이는 비효율적--> &rhs를 통하여 참조하게끔 하는 것이 복사를 줄일수 있음(메모리절약) 마찬가지로 메소드 자체도 reference로 하는 것이 좋음&operator)
클래스 정의시 소멸자 부분에 사용한 데이터 delete하고 null 대입해주는 거 관습적으로 하기(메모리 관리)
이때 자기자신에게 대입하는 경우에 예외가 생기는데 이때 데이터를 delete 해주면서 쓰레기 값이 출력됨
-->자기자신과 입력받은 객체가 같은 값(을 가리키는 것인지) 포인터를 이용해 비교
String &operator=(const String &rhs주어진 매개변수가 포인터임을 의미){
    if (this == &rhs 해당변수의 주솟값을 의미){
        delete[] strData;
        strData=new char[rhs.len+1];
        cout<<"strData 할당"<< StrData<<endl;
        strcpy(strData,rhs.strData)
        len=rhs.len;
    }
    return *this;
}
69강.이동시멘틱
임시 객체란?--> getname()에서 res를 리턴하면서 이를 a변수에 깊은 복사하기 전에 거치는 임시객체(리턴하면서 res가 사라지므로)
--> 굳이 a변수를 위해 객체 3개나 생성할 필요가 없다--> 임의 객체로 복사되고 에서 복사될때 복사 생성자(깊은복사)를 호출하지 않고 얕은 복사가 이루어지게 생성자를 새로 만든다 --> 이동시멘틱의 이유
--> r value의 필요성 : (좌변에 못오는 값들, 우변에만 올 수 있는 ex.5-->메모리 상에 어떤 저장되어 있지 않은 값들 but 임시객체도 포함, 무언가를 대입할 수 없으므로)
70강. 이동 생성자와 이동 대입 연산자 (이동 시멘틱에 포함)
이동 생성자
String(String &&rhs){
    len=rhs.len;
    strData=rhs.strData; (임의 객체 strData가 rhs.strData 얕은 복사)
    rhs,strData=NULL; (기존 rhs.strData가 가리키는 곳이 사라지므로 임의객체 strData는 계속 가리키고 있고 delete rhs.strData 해도 그 데이터는 가리키는 곳이 없으므로 안전하게 사라짐)
}
res가 반환되는 동안은 r value로 간주되어 해당 생성자에서 매개변수로 전달이 됨 (또한 const 가 있는 매개변수면 r value 도 받을 수 있음)
이동대입연산자
String &operator=(String &&rhs){
    cout<<"String &operator=(String&&):"<< this<<endl;
    if(this !=&rhs){
        release();
        len=rhs.len;
        alloc(len);
        strcpy(strData,rhs.strData);
        }
        return *this;
lvalue는 메모리의 특정 주소를 갖고 있는 값이고, rvalue는 특정주소를 갖고 있지 않은 일시적인 값
참조 매개변수 &&는 이러한 rvalue reference를 지칭할 수 있고,
&는 lvalue reference를 할 수 있는 연산자이다.
71강. (암시적)묵시적 형변환 implicit conversion
변환 생성자
class Item{
public:
    Item(int num): num(num){
        cout << "Item(int)" << endl;
     } --> 변환생성자((Item)4; 와 같이 다른 자료형을 Item 으로 변환시킬때 호출됨 역할에 따라 그냥 생성자가 될 수도 변환 생성자가 될수도 (변환을 담당할 수 있는 생성자면 변환 생성자가 됨)
    Item(string name): name(name){
        cout<<"Item(string)"<<endl;
    }-->마찬가지로 string에서의 변환생성자 (i5=(string)"stone";)
    Item(int num, string name): num(num),name(name){
        cout<<"Item(int,string)"<<endl;
    }
private:
    int num;
    string name;
};
int main{
i3=3; -->묵시적 형변환
Item i4=(Item)4;-->명시적변환
}
72강. Item 을 int로 바꾸는 경우?(역의 경우)
int itemNum=(int)i8; 의 경우에도 int는 연산자이므로 마찬가지로 오버로딩을 해줄 수 있다. 
operator int() const{
어차피 int로 반환될 것임이 함수 특성상 내포되어 있어서 앞에 반환타입을 적지 않고 뒤에 적음
또한 형변환 연산자는 기존 객체를 변형시키지 않으므로 안전장치로 const 붙이는게 좋음
    return num;
}
int itemNum1=(int)i8;
int itemNum2=i7; 등 명시적, 묵시적 형변환 모두 가능
string을 매개변수로 받는 println도 println(i8);에서 i8이 string 형변환으로 묵시적 형변환이 일어남 (만약 println이 int와 string 둘 다를 매개변수로 받는다면 어떤 것으로 묵시적 형변환 할지 모르기 때문에 명시적 형변환이 필요함)
--> 묵시적 형변환을 막아버리는 기법: explicit operator int() const{}->명시적 변환시에만 호출됨
75강.상속과 접근제어
자식클래스(조건이 더 많음)는 부모 클래스에 포함된다.
class Base:{
};
class Derived : public Base {
}; --> 이거는 대부분 퍼블릭으로 씀. 프로텍티드로 하면 부모 퍼블릭을 자식에서 프로텍티드로 바꿈, 프라이빗 선언하면 상속 받을 수 있는거 다 프라이빗으로 받음
접근제어-->protected(외부접근 x, private과 다르게 자식클래스에서 접근 가능), public, private 접근제어 지시자로 제어하는 것.
부모의 접근제어 분류는 그대로 자식으로 감
76강. 상속이 필요한 이유
부모클래스를 통해 관리하여 객체 관리가 용이함
77강. 오버라이딩과 정적 바인딩
override=우선하다
부모 클래스와 자식 클래스에 같은 이름의 멤버 변수가 있는 경우 base.a==derived.a? --> derived 에서 정의된 a가 출력됨(우선됨) base.base::a 하면 부모 클래스거 출력됨
오버로딩--> 함수에서 우선되는 개념, 오버ride: 상속에서 우선되는 개념(덮어쓰이는게 아님) 
정적바인딩-->b->print()처럼 모호한 서술이 나왔을때 b를 어떻게 취급(바인딩) 할 것인가?-->다 부모클래스로 간주하자(정적)
Derived d;
Base *b=&d; --> 부모클래스 타입 포인터가 자식을 가리킬 수 있음
이때 b를 출력한다면 Base에 구현된 print가 호출될까 derived에 포함된 print가 호출될까?--> base거가 호출됨
상속된 자식 클래스에 항상 print가 구현이 안될 수도 있기 때문에 부모 클래스의 print를 호출하게 만듦 또 부모 클래스를 가리키고 있을 때에도 모두 일관성 있게 컴파일 할 수 있도록 설계됨
78강. 가상 함수와 동적 바인딩
동적바인딩-> 부모클래스 포인터형식이어도 자식클래스의 함수를 호출하고 싶다!(가상함수이용)
virtual void Use(){ cout<<"weapeon::use()"<<endl;} --> 부모 클래스에서 호출된 함수에 가상함수 표시해주기--> 가상 함수이므로 호출이 될수도 있고 안될수도 있다는 의미(프로그램이 실행되는 시점에서 결정하게끔 한다.)--> 실제로 자식클래스 주소가 바인딩 되면 가상함수는 실행이 되지 않음
79강. 상속이 필요한 이유(2)
-> 참조를 통해 (포인터를 매개변수로 하기 때문에 동적 바인딩이 가능함) 넘겨야함
그게 아니면 객체 복사를 통해 부모 클래스로 받아버림으로써 하위 클래스로의 바인딩이 불가능해짐
참조로 클래스들의 배열을 선언해줘야 동적할당으로 자유자재로 메모리를 사용할 수 있게 됨
범위기반for문-> for(Messsage *m:messages){printMessage(*m);}
80강.순수 가상 함수와 추상 클래스
기존에 virtual 는 실행하려면 실행할 수 있다(부모클래스를 가리키고 그대로 호출하면 됨)
순수가상함수를 하나라도 가진 클래스(추상클래스) 는 인스턴스를 가질 수 없음 오버라이딩을 위한 클래스(자식 클래스가 구현해야할 메소드에 대한 틀을 제공하는 기능을 하기도 함)
--> virtual void f()=0;
공통된 추상 클래스가 있으면 같은 범주로 묶고 싶은 여러 클래스들이 섞인 배열을 손쉽게 선언할 수 있음
81강. 생성/소멸자 실행 순서와 가상 소멸자
자식클래스 생성될때 그 이전에 부모 클래스 생성자/이후에 소멸자도 호출됨
생성자 호출순서와 소멸자 호출 순서는 반대
한 클래스가 소멸될때 생성된 변수를 메모리 해제한후 포인터 변수를 해제해야함
생성될 때 포인터가 생성되는 것과 그 객체가 생성되는 것을 구분해야함
부모클래스 포인터가 자식클래스를 가리키는 경우 부모 클래스 소멸자를 가상 함수로 해야 자식 클래스 소멸자가 실행되어(없으면 정적 바인딩 때문에 부모클래스 소멸자만 호출됨) 효율적인 자원관리가 되어짐
virtual ~Bingsoo(){}
82강.상속에서의 형변환-업캐스팅(올라가는 형변환 : 자식 클래스-> 부모 클래스)
Base *b= new Drived; 도 엄밀히 보자면 다른 종류의 클래스 사이에서 형변환된 것
*a=a[]
형변환이 일어나면 하나의 긴 배열을 알아서 다르게 잘라먹음
->오류가 나는 코드 FlyingAnimal 은 Animal 클래스를 상속받아 x,y 말고도 z가 추가된 클래스
FlyingAnimal *a = new FlyingAnimal[10];
printAnimals(a,10);
delete[] a;
-->Animal **a = new Animal*[10]; 포인터 10개를 만들어 동적할당
    for (int i =0; i<10;i++){
        a[i] = new FlyingAnimal; 하나씩 flyinganimal을 가리키게 동적할당
    }
    printAnimals(a,10);
    for (int i=0;i<10;i++){
        delete a[i];
     }
    delete[] a;
결국 하나씩 밸류값을 모은게 아닌 포인터를 모아놔서 각 포인터가 가리키는 x y 좌표 찾게 한 것!
83강. 상속에서의 형변환-다운캐스팅 (static cast)
정적 바인딩 때문에 부모클래스 포인터로 자식클래스를 가리켜도 그 포인터로는 부모 클래스의 멤버에만 접근할수 있고 자식 클래스 멤버에는 접근 불가
그럼 이 포인터를 자식클래스 포인터를 가리키게 Drv1 *d1=b; 처럼 부모 클래스에서 자식클래스로 형변환 시킬때에는 다운캐스팅이 안되므로 명시적 형변환을 해줘야 한다.--> Drv1 *d1 = (Drv1*)b;
근데 너무 그냥 포인터 주소기만 하면 형변환을 시도하지 않도록 만들어진게 static_cast
--> Drv1 *d1= static_cast<Drv1*>b (업캐스팅, 다운캐스팅 정도만 허용해줌)
하지만 drv1을 drv2로 형변환도 가능하게 함
그러면 float로 표현된 이진수도 int로 읽어들이는 등 예상치 못한 결과가 남
84강. 상속에서의 형변환-RTTI와 dynamic cast
정적-->컴파일 단계에서 실행 , 동적-->런타임 중 실행
같은 부모 클래스를 가진 클래스(방계)끼리의 형변환이 static cast에서는 가능함, 그렇지만 이런 이유로 다양한 오류가 발생할 수 있게 됨
가상 함수를 하나라도 가진 클래스(다형성 클래스)는 앞에 포인터를 할당하는 4byte가 추가로 할당되는데, 이 포인터는 클래스에 대한 정보가 저장된 공간을 가리키게 됨(자기 신분을 가리키는 곳)
형변환시 해당 포인터가 정말로 a 객체를 가리키고 있을 때에만 a로 형변환할 수 있게 하는 것이 dynamic cast 이 과정은 다형성클래스 앞에 할당된 포인터를 한번 더 가리키게 함으로써 (실제로 allocated 된 객체의 신분을 직접 물어본다) 
이를 가능하게 한다. 이렇게 런타임과정에서 객체 정보를 확인할 수 있게 하는 것을 RunTime Type Information이라고 함
int main(){
	Shape *shapes[] = { new Circle(1), new Rectangle(1,2)};
	for (int i=0; i<2;i++){
		cout<<"도형의 넓이:"<<shapes[i]->GetArea()<<endl;
		Rectangle *r=dynamic_cast<Rectangle*>(shapes[i]); 배열shapes 중 두번째 요소만 직사각형이므로 정상적으로 형변환이 되고 첫번쨰요소는 null 값을 반환하게 함
		if (r!=NULL){
			cout<<"대각선의 길이:"<<r->Ge
		}
	}
	for (int i=0;i<2;i++) {
		delete shapes[i];
	}
}
85강. 객체 지향 프로그래밍(OOP)의 4대 원리
1.캡슐화(Encapsulation)
	무엇 -데이터(멤버 변수)와 기능(멤버 메소드)를 하나의 단위로 묶어 놓음
	      -데이터를 보이지 않게 가리고, 데이터에 접근하기 위한 메서드만을 노출( 데이터 은닉)
	언제 -언제든!
	왜   -클래스 사용자: 클래스 내부 구조 이해X, 사용법만 알면 사용 가능
			데이터를 실수로 잘못 바꾸는 것을 방지
	어떻게- 클래스 안에 멤버 변수, 멤버 메서드 선언/ 접근 제어
2.상속성(Inheritance)
	무엇 - 부모 클래스의 멤버를 재사용해서 자식 클래스에서도 사용할 수 있음
	언제 - 부모 클래스에서 할 수 있는 일을 자식 클래스에서 할 수 있다.(Liskov 치환 원칙)
	      - 자식 클래스는 부모 클래스의 일종이다 (A is a B)
	왜   - 코드 재사용
3.다형성(Polymorphism)
	무엇 - 동적 다형성: 한 클래스가 그로부터 파생된 다양한 형태를 지닐 수 있음
	      - 정적 다형성: 함수 오버로딩, 템플릿
	언제 - 자식 클래스의 메서드 구현이 부모 클래스와 다를때
	왜   - 자식 클래스에서 하고 싶은 일들이 부모 클래스에서와 다를 수 있음
	어떻게 - 오버라이딩, 가상 함수!!(RTTI,다형적 클래스)
4.추상화(Abstraction) (클래스 간 추상화)
	무엇 - 부모 클래스: 클래스가 구현해야 할 기능만을 명시(순수 가상 함수)
	      - 자식 클래스: 실제 구현
	언제 - [자식 클래스]는 [부모 클래스] 할 수 있어야 한다.(A is able to B)
	왜   - "자동차" : 운전대, 페달, 기어 변속기 (추상 클래스)
	      - 각 부품의 작동 원리는 자동차 종류마다 다름
	어떻게 - 추상 클래스 (순수 가상 함수)
89강. 다중 상속과 다이아몬드 문제
한 클래스에서부터 파생된 복수의 클래스를 다중 상속 받은 객체는 최상위 부모 클래스의 멤버가 복수개 생기게 됨 --> 다이아몬드 문제
c++에서는 가상 상속으로 해결 (가상으로 상속 받은 것은 최하위 객체가 최상위 객체로부터 직접 상속(거쳐서 상속x))
struct Student : virtual Person{}
--> 하위 객체가 오버라이딩 하면 최상위? 차상위? 에서 받아야 되는지 모호해짐
다중상속은 인터페이스로부터만 받는다는 규칙이 필요함(상위 클래스는 다 인터페이스여야함)
인터페이스: 모든 메서드가 순수 가상 함수이고 (비정적) 멤버 변수는 없는 클래스
가상 차상위 클래스로부터 각각 클래스를 만들던가 하면 됨(인터페이스로 만든 이상 하위 클래스 각각에 공통된 멤버 일일이 구현하는 건 불가피함)
90강. 정사각형-직사각형 문제
자식이 필요한 멤버(한변)가 부모의 멤버(가로,세로)보다 적음
각 멤버에 대한 메소드도 상속되기 때문에 메소드도 여러번 호출하거나 호출하지 못하는 문제가 발생함
--> 받으면 안될 것 같은 메소드를 삭제해버림
void ResizeX(double k)=delete;
void ResizeXY(double k){
    Rectangle::ResizeX(k);
    Rectangle::ResizeY(k);
}
하지만 Rectangle *r=new Square 에서 Square객체에 Rectangle메소드가 호출되는 건 막을 수 없음
불변 클래스(멤버 변수가 const로 선언된 상수인 클래스)를 활용할 수도 있음
--> Rectangle ResizeX(double k) const { return Rectangle(a*k,b);} 이런식으로 메소드가 조작이 아니라 반환하게 설계해서 해결할 수도 있다.
91강. 함수 템플릿과 클래스 템플릿
어떠한 자료형에 대해서도 고정된 연산을 할 수 있게 하는 함수 템플릿
template<typename T>-->타입파라미터( 여러개 줄 수 있음)
T getArraySum(const T arr[], int n){
    T sum = 0;
    for (int i = 0; i<n; i++){
        sum += arr[i];
    }
    return sum;
}
int isum = getArraySum<int>(iarr,5);
경우에 따라 operator을 이용해 연산자 오버로딩하면 됨
클래스 템플릿도 마찬가지 (float,int,double 담는 벡터 등)
92강. 템플릿 특수화와 비타입 파라미터
특정 케이스(자료형)에 대해 템플릿에 specification을 추가하는 것
template<>--> string에 대해 템플릿 특수화
string getArraySum<string>(const string arr[],int n){
    string sum = arr[0];
    for (int i = 1; i < n ; i++){
        sum += ' '+ arr[i];
    }
    return sum;
}
타입과 비타입을 섞어서 여러 파라미터 줄 수도 있음 -> 이때 비타입 인수가 달라지면 다른 인수를 받은 템플릿은 다른 객체로 인식 되기 때문에 3차원벡터와 2차원벡터를 더하는 것과 같은 경우를 막을 수 있음
template<typename T,int n>
class Vector{
public:
    Vector(){
    T GetComp(int i) const {
        return comp[i];
    }
    void SetComp(int i,T val){
        comp[i]=val;
    }
    Vector operator+(const Vector &rhs) const {
        Vector res;
        for (int i = 0; i<n; i++){
            res.comp[i]=this->comp[i]+rhs.comp[i];
        }
        return res;
    }
93강. 예외처리
예외 객체를 던지고 throw 받아서 catch 예외처리를 실행해준다.
int fact(int n){
    if (n<0) throw to_string(n) + ":음수입니다.";
    if (n==0) return 1;
    return n * fact(n-1);}
int comb(int n, int r){
    int a = fact(n);
    int b = fact(r);
    int c = fact(n-r);
    return a/b/c;}
int main(){
    int n,r;
    cin>>n>>r;
    try {
        cout<<comb(n,r)<<endl;}
    catch (const string &e){
        cout << e << endl;
    catch (...){
        cout<<"알수없는예외발생"<<endl;}
    }}
--> 함수를 구현할때 함수 내에 예외처리를 함으로써 코드를 간결화시킬 수 있다., 또한 던져진 예외가 함수간에도 이동할 수 있다.
94강. 함수 포인터
bool compare(int a, int b){
    return a==b;}
int main(){
    bool (*fp)(int,int); (fp에 역참조를 하면 int,int를 매개변수로 하고 bool을 반환하는 함수임)
    fp = &compare;(&생략가능)
    bool res = fp(2,3);((*fp)생략가능)}-->생략가능은 함수 포인터라 오해의 여지가 없기 때문
-->함수의 매개변수로 int (*f)(int)와 같이 함수를 전달할 수 있음
95강. 함수 객체와 람다식
operator--> f();처럼 호출할때 호출되는 연산자(초기화 할때의 경우와는 다름)
이런식으로 Func(독립변수); 함수를 사용하는 것이 함수객체
또는
#include<functional>
function<int(int)> f 
int min=f(arr[0]); -->int를 매개변수로 받는 int 함수를 지칭하는 것만으로 그러한 조건을 만족하는 함수를 f 객체 안에서 지칭해서 매개변수로 넘길 수 있음
람다식(익명함수)
int (*fp)(int) = [](int n)->int{ return n*n;};
auto fp = [](int n)->int{ return n*n;};
96강. 스마트 포인터
소멸해야 될 때가 오면 소멸시켜준다
#include <memory>
unique_ptr<Test클래스이름> a(new Test);
이 때 a=b;와 같이 같은 종류의 객체를 대입할 수 없음(unique_ptr 자체적으로 대입 연산자를 삭제했기 때문, 그 이유는 unique_ptr는 하나만이 가리켜야 하기 때문)
--> 한 데이터를 가리키는 두 포인터 a,b가 있을 때 delete a; 하면 해당 데이터는 이미 해제가 된 데이터이기 때문에 더 이상 delete b;할 수 없다. 하나의 데이터는 지칭하는 unique_ptr가 하나여야 한다.
unique_ptr<int> a(new int(5));
unique_ptr<int> b(a.release());
cout<<*b<<endl; -->a를 소유권을 포기하고 b에게 데이터의 포인터를 넘겨준다.
reset기능 ->a가 다른 데이터를 가리키게 하고 싶을 때 메모리 누수 방지를 위해 현재 참조 데이터를 릴리즈하고 새 데이터를 가리키게 한다.
a.reset(new Test(6));
한 객체를 여러 포인터가 지칭할 수 있게 하는 스마트 포인터:shared_ptr
shared_ptr<Test> a(new Test(5));
{	shared_ptr<Test> b = a;} --> a가 사라지면 5를 가리키는 a.use_count가 1씩 줄어들어 그 데이터에 대한 use_count가 0이 되면 해당 데이터가 릴리즈된다.
weak_ptr 은 use_count에 영향을 주지 않는 (소유권을 가지지 못하는 )ptr
weak_ptr<Test> b;
if (!b.expired()해당 객체가 가리키는 값이 유효하다면){ cout << b.lock()->GetX()<<endl;} 이를 통해 쉐어드 포인터를 받아와라